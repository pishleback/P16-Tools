# Multiply a and b
# Put the result into registers 0 and 1

.CONST a 63
.CONST b 4099

..ROM 0
VALUE a
VALUE b
CALL mul
RETURN

.LABEL mul
POP %2
VALUE 0
DUP
DUP
POP %0
POP %1
POP %3
.LABEL mul_loop
RSH
.USEFLAGS
BRANCH !C mul_skip
# Add
PUSH %0
ADD %2
POP %0
PUSH %1
CADD %3
POP %1
.LABEL mul_skip
# Double
PUSH %2
ADD %2
POP %2
PUSH %3
CADD %3
POP %3
DUP
POPNOOP
.USEFLAGS
BRANCH !Z mul_loop
POPNOOP
PUSH %1
PUSH %0
OUTPUT 2
OUTPUT 2
RETURN