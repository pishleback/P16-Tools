use crate::assembly::*;
use std::str::FromStr;

grammar;

Label: Label = {
    <label:r"[a-z|_][a-z|_|0-9]*"> => Label::new(String::from(label)).unwrap(),
}

NibbleNum: Nibble = {
    "0" => Nibble::N0,
    "1" => Nibble::N1,
    "2" => Nibble::N2,
    "3" => Nibble::N3,
    "4" => Nibble::N4,
    "5" => Nibble::N5,
    "6" => Nibble::N6,
    "7" => Nibble::N7,
    "8" => Nibble::N8,
    "9" => Nibble::N9,
    "10" => Nibble::N10,
    "A" => Nibble::N10,
    "11" => Nibble::N11,
    "B" => Nibble::N11,
    "12" => Nibble::N12,
    "C" => Nibble::N12,
    "13" => Nibble::N13,
    "D" => Nibble::N13,
    "14" => Nibble::N14,
    "E" => Nibble::N14,
    "15" => Nibble::N15,
    "F" => Nibble::N15,
}

SixteenBitNum: u16 = {
    "0" => 0,
    "1" => 1,
    "2" => 2,
    "3" => 3,
    "4" => 4,
    "5" => 5,
    "6" => 6,
    "7" => 7,
    "8" => 8,
    "9" => 9,
    "10" => 10,
    "11" => 11,
    "12" => 12,
    "13" => 13,
    "14" => 14,
    "15" => 15,
    <value:r"[0-9]+"> => u16::from_str(value).unwrap(),
    <value:r"-[0-9]+"> => i16::from_str(value).unwrap() as u16,
}

OctDigit: OctDigit = {
    "0" => OctDigit::O0,
    "1" => OctDigit::O1,
    "2" => OctDigit::O2,
    "3" => OctDigit::O3,
    "4" => OctDigit::O4,
    "5" => OctDigit::O5,
    "6" => OctDigit::O6,
    "7" => OctDigit::O7,
}

Register: Nibble = {
    "%0" => Nibble::N0,
    "%1" => Nibble::N1,
    "%2" => Nibble::N2,
    "%3" => Nibble::N3,
    "%4" => Nibble::N4,
    "%5" => Nibble::N5,
    "%6" => Nibble::N6,
    "%7" => Nibble::N7,
    "%8" => Nibble::N8,
    "%9" => Nibble::N9,
    "%10" => Nibble::N10,
    "%A" => Nibble::N10,
    "%11" => Nibble::N11,
    "%B" => Nibble::N11,
    "%12" => Nibble::N12,
    "%C" => Nibble::N12,
    "%13" => Nibble::N13,
    "%D" => Nibble::N13,
    "%14" => Nibble::N14,
    "%E" => Nibble::N14,
    "%15" => Nibble::N15,
    "%F" => Nibble::N15,
}

Condition: Condition = {
    "I" => Condition::InputReady,
    "!I" => Condition::InputNotReady,
    "Z" => Condition::Equal,
    "!Z" => Condition::NotEqual,
    "N" => Condition::Negative,
    "!N" => Condition::Positive,
    "C" => Condition::HigherSame,
    "!C" => Condition::Lower,
    "V" => Condition::OverflowSet,
    "!V" => Condition::OverflowClear,
    "EQ" => Condition::Equal,
    "NE" => Condition::NotEqual,
    "HS" => Condition::HigherSame,
    "LO" => Condition::Lower,
    "HI" => Condition::Higher,
    "LS" => Condition::LowerSame,
    "GE" => Condition::GreaterEqual,
    "LT" => Condition::Less,
    "GT" => Condition::Greater,
    "LE" => Condition::LessEqual,
}

Line: (Line, usize) = {
    "PASS" <endl:@R>                                => (Line::Command(Command::Pass), endl),
    "VALUE" <endl:@R> <value:SixteenBitNum>         => (Line::Command(Command::Value(value)), endl),
    "JUMP" <endl:@R> <l:Label>                      => (Line::Command(Command::Jump(l)), endl),
    "BRANCH" <endl:@R> <c:Condition> <l:Label>      => (Line::Command(Command::Branch(c, l)), endl),
    "PUSH" <endl:@R> <r:Register>                   => (Line::Command(Command::Push(r)), endl),
    "POP" <endl:@R> <r:Register>                    => (Line::Command(Command::Pop(r)), endl),
    "CALL" <endl:@R> <l:Label>                      => (Line::Command(Command::Call(l)), endl),
    "RETURN" <endl:@R>                              => (Line::Command(Command::Return), endl),
    "ADD" <endl:@R> <r:Register>                    => (Line::Command(Command::Add(r)), endl),
    "ROTATE" <endl:@R> <s:NibbleNum> <r:Register>   => (Line::Command(Command::Rotate{ shift : s, register : r }), endl),

    "DUP" <endl:@R>     => (Line::Command(Command::Duplicate), endl),
    "NOT" <endl:@R>     => (Line::Command(Command::Not), endl),
    "KREAD" <endl:@R>   => (Line::Command(Command::Read), endl),
    "PREAD" <endl:@R>   => (Line::Command(Command::ReadPop), endl),
    "INC" <endl:@R>     => (Line::Command(Command::Increment), endl),
    "CINC" <endl:@R>    => (Line::Command(Command::IncrementWithCarry), endl),
    "DEC" <endl:@R>     => (Line::Command(Command::Decrement), endl),
    "CDEC" <endl:@R>    => (Line::Command(Command::DecrementWithCarry), endl),
    "NEG" <endl:@R>     => (Line::Command(Command::Negate), endl),
    "CNEG" <endl:@R>    => (Line::Command(Command::NegateWithCarry), endl),
    "KSETF" <endl:@R>   => (Line::Command(Command::NoopSetFlags), endl),
    "PSETF" <endl:@R>   => (Line::Command(Command::PopSetFlags), endl),
    "RSH" <endl:@R>     => (Line::Command(Command::RightShift), endl),
    "CRSH" <endl:@R>    => (Line::Command(Command::RightShiftCarryIn), endl),
    "IRSH" <endl:@R>    => (Line::Command(Command::RightShiftOneIn), endl),
    "ARSH" <endl:@R>    => (Line::Command(Command::ArithmeticRightShift), endl),

    "SWAP" <endl:@R> <r:Register>   => (Line::Command(Command::Swap(r)), endl),
    "SUB" <endl:@R> <r:Register>    => (Line::Command(Command::Sub(r)), endl),
    "KWRITE" <endl:@R> <r:Register> => (Line::Command(Command::Write(r)), endl),
    "PWRITE" <endl:@R> <r:Register> => (Line::Command(Command::WritePop(r)), endl),
    "AND" <endl:@R> <r:Register>    => (Line::Command(Command::And(r)), endl),
    "NAND" <endl:@R> <r:Register>   => (Line::Command(Command::Nand(r)), endl),
    "OR" <endl:@R> <r:Register>     => (Line::Command(Command::Or(r)), endl),
    "NOR" <endl:@R> <r:Register>    => (Line::Command(Command::Nor(r)), endl),
    "XOR" <endl:@R> <r:Register>    => (Line::Command(Command::Xor(r)), endl),
    "NXOR" <endl:@R> <r:Register>   => (Line::Command(Command::NXor(r)), endl),
    "SETF" <endl:@R> <r:Register>   => (Line::Command(Command::RegToFlags(r)), endl),
    "CMP" <endl:@R> <r:Register>    => (Line::Command(Command::Compare(r)), endl),
    "SADD" <endl:@R> <r:Register>   => (Line::Command(Command::SwapAdd(r)), endl),
    "SSUB" <endl:@R> <r:Register>   => (Line::Command(Command::SwapSub(r)), endl),
    "CADD" <endl:@R> <r:Register>   => (Line::Command(Command::AddWithCarry(r)), endl),
    "CSUB" <endl:@R> <r:Register>   => (Line::Command(Command::SubWithCarry(r)), endl),

    "RAWRAMCALL" <endl:@R>                              => (Line::Command(Command::RawRamCall), endl),
    "INPUT" <endl:@R>                                   => (Line::Command(Command::Input), endl),
    "OUTPUT" <endl:@R> <addr:DotSepNonEmpty<OctDigit>>  => (Line::Command(Command::Output(addr)), endl),

    "..ROM" <endl:@R> <n:NibbleNum> => (Line::Meta(Meta::RomPage(n)), endl),
    "..RAM" <endl:@R>               => (Line::Meta(Meta::RamPage), endl),
    ".LABEL" <endl:@R> <l:Label>    => (Line::Meta(Meta::Label(l)), endl),
    ".USEFLAGS" <endl:@R>           => (Line::Meta(Meta::UseFlags), endl),

    ".COMMENT" <endl:@R> <c:r#""[0-9|a-z|A-Z|\s|']*""#> => (Line::Meta(Meta::Comment), endl),
}

pub LineWithPos: WithPos<Line> = {
    <start:@L> <line:Line> => WithPos {start, end : line.1, t : line.0},
}

pub Assembly: Assembly = {
    <lines:Concat<LineWithPos>> => Assembly::new(lines),
}

Concat<T>: Vec<T> = {
    => vec![],
    <mut v:(<T>)*> <e:T> => {
        v.push(e);
        v
    }
};

DotSepNonEmpty<T>: Vec<T> = {
    <mut v:(<T> ".")*> <e:T> => {
        v.push(e);
        v
    }
};