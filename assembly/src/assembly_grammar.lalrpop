use crate::assembly::*;
use std::str::FromStr;

grammar;

Label: Label = {
    <label:r"[a-z|_][a-z|_|0-9]*"> => Label::new(String::from(label)).unwrap(),
}

NibbleNum: Nibble = {
    "0" => Nibble::N0,
    "1" => Nibble::N1,
    "2" => Nibble::N2,
    "3" => Nibble::N3,
    "4" => Nibble::N4,
    "5" => Nibble::N5,
    "6" => Nibble::N6,
    "7" => Nibble::N7,
    "8" => Nibble::N8,
    "9" => Nibble::N9,
    "10" => Nibble::N10,
    "A" => Nibble::N10,
    "11" => Nibble::N11,
    "B" => Nibble::N11,
    "12" => Nibble::N12,
    "C" => Nibble::N12,
    "13" => Nibble::N13,
    "D" => Nibble::N13,
    "14" => Nibble::N14,
    "E" => Nibble::N14,
    "15" => Nibble::N15,
    "F" => Nibble::N15,
}

SixteenBitNum: u16 = {
    "0" => 0,
    "1" => 1,
    "2" => 2,
    "3" => 3,
    "4" => 4,
    "5" => 5,
    "6" => 6,
    "7" => 7,
    "8" => 8,
    "9" => 9,
    "10" => 10,
    "11" => 11,
    "12" => 12,
    "13" => 13,
    "14" => 14,
    "15" => 15,
    <value:r"[0-9]+"> => u16::from_str(value).unwrap(),
    <value:r"-[0-9]+"> => i16::from_str(value).unwrap() as u16,
}

OctDigit: OctDigit = {
    "0" => OctDigit::O0,
    "1" => OctDigit::O1,
    "2" => OctDigit::O2,
    "3" => OctDigit::O3,
    "4" => OctDigit::O4,
    "5" => OctDigit::O5,
    "6" => OctDigit::O6,
    "7" => OctDigit::O7,
}

Register: Nibble = {
    "%0" => Nibble::N0,
    "%1" => Nibble::N1,
    "%2" => Nibble::N2,
    "%3" => Nibble::N3,
    "%4" => Nibble::N4,
    "%5" => Nibble::N5,
    "%6" => Nibble::N6,
    "%7" => Nibble::N7,
    "%8" => Nibble::N8,
    "%9" => Nibble::N9,
    "%10" => Nibble::N10,
    "%A" => Nibble::N10,
    "%11" => Nibble::N11,
    "%B" => Nibble::N11,
    "%12" => Nibble::N12,
    "%C" => Nibble::N12,
    "%13" => Nibble::N13,
    "%D" => Nibble::N13,
    "%14" => Nibble::N14,
    "%E" => Nibble::N14,
    "%15" => Nibble::N15,
    "%F" => Nibble::N15,
}

Condition: Condition = {
    "I" => Condition::InputReady,
    "!I" => Condition::InputNotReady,
    "Z" => Condition::Equal,
    "!Z" => Condition::NotEqual,
    "N" => Condition::Negative,
    "!N" => Condition::Positive,
    "C" => Condition::HigherSame,
    "!C" => Condition::Lower,
    "V" => Condition::OverflowSet,
    "!V" => Condition::OverflowClear,
    "EQ" => Condition::Equal,
    "NE" => Condition::NotEqual,
    "HS" => Condition::HigherSame,
    "LO" => Condition::Lower,
    "HI" => Condition::Higher,
    "LS" => Condition::LowerSame,
    "GE" => Condition::GreaterEqual,
    "LT" => Condition::Less,
    "GT" => Condition::Greater,
    "LE" => Condition::LessEqual,
}

ConditionWithPos: WithPos<Condition> = {
    <start:@L> <c:Condition> <end:@R> => WithPos{ start, end, t: c },
}

Line: WithPos<Line> = {
    <start:@L> "PASS" <end:@R>                                => WithPos{ start, end, t : Line::Command(Command::Pass) },
    <start:@L> "VALUE" <end:@R> <value:SixteenBitNum>         => WithPos{ start, end, t : Line::Command(Command::Value(value)) },
    <start:@L> "JUMP" <end:@R> <l:Label>                      => WithPos{ start, end, t : Line::Command(Command::Jump(l)) },
    <start:@L> "BRANCH" <end:@R> <c:ConditionWithPos> <l:Label>      => WithPos{ start, end, t : Line::Command(Command::Branch(c, l)) },
    <start:@L> "PUSH" <end:@R> <r:Register>                   => WithPos{ start, end, t : Line::Command(Command::Push(r)) },
    <start:@L> "POP" <end:@R> <r:Register>                    => WithPos{ start, end, t : Line::Command(Command::Pop(r)) },
    <start:@L> "CALL" <end:@R> <l:Label>                      => WithPos{ start, end, t : Line::Command(Command::Call(l)) },
    <start:@L> "RETURN" <end:@R>                              => WithPos{ start, end, t : Line::Command(Command::Return) },
    <start:@L> "ADD" <end:@R> <r:Register>                    => WithPos{ start, end, t : Line::Command(Command::Add(r)) },
    <start:@L> "ROTATE" <end:@R> <s:NibbleNum> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::Rotate{ shift : s, register : r }) },

    <start:@L> "DUP" <end:@R>     => WithPos{ start, end, t : Line::Command(Command::Duplicate) },
    <start:@L> "NOT" <end:@R>     => WithPos{ start, end, t : Line::Command(Command::Not) },
    <start:@L> "KREAD" <end:@R>   => WithPos{ start, end, t : Line::Command(Command::Read) },
    <start:@L> "PREAD" <end:@R>   => WithPos{ start, end, t : Line::Command(Command::ReadPop) },
    <start:@L> "INC" <end:@R>     => WithPos{ start, end, t : Line::Command(Command::Increment) },
    <start:@L> "CINC" <end:@R>    => WithPos{ start, end, t : Line::Command(Command::IncrementWithCarry) },
    <start:@L> "DEC" <end:@R>     => WithPos{ start, end, t : Line::Command(Command::Decrement) },
    <start:@L> "CDEC" <end:@R>    => WithPos{ start, end, t : Line::Command(Command::DecrementWithCarry) },
    <start:@L> "NEG" <end:@R>     => WithPos{ start, end, t : Line::Command(Command::Negate) },
    <start:@L> "CNEG" <end:@R>    => WithPos{ start, end, t : Line::Command(Command::NegateWithCarry) },
    <start:@L> "KSETF" <end:@R>   => WithPos{ start, end, t : Line::Command(Command::NoopSetFlags) },
    <start:@L> "PSETF" <end:@R>   => WithPos{ start, end, t : Line::Command(Command::PopSetFlags) },
    <start:@L> "RSH" <end:@R>     => WithPos{ start, end, t : Line::Command(Command::RightShift) },
    <start:@L> "CRSH" <end:@R>    => WithPos{ start, end, t : Line::Command(Command::RightShiftCarryIn) },
    <start:@L> "IRSH" <end:@R>    => WithPos{ start, end, t : Line::Command(Command::RightShiftOneIn) },
    <start:@L> "ARSH" <end:@R>    => WithPos{ start, end, t : Line::Command(Command::ArithmeticRightShift) },

    <start:@L> "SWAP" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::Swap(r)) },
    <start:@L> "SUB" <end:@R> <r:Register>    => WithPos{ start, end, t : Line::Command(Command::Sub(r)) },
    <start:@L> "KWRITE" <end:@R> <r:Register> => WithPos{ start, end, t : Line::Command(Command::Write(r)) },
    <start:@L> "PWRITE" <end:@R> <r:Register> => WithPos{ start, end, t : Line::Command(Command::WritePop(r)) },
    <start:@L> "AND" <end:@R> <r:Register>    => WithPos{ start, end, t : Line::Command(Command::And(r)) },
    <start:@L> "NAND" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::Nand(r)) },
    <start:@L> "OR" <end:@R> <r:Register>     => WithPos{ start, end, t : Line::Command(Command::Or(r)) },
    <start:@L> "NOR" <end:@R> <r:Register>    => WithPos{ start, end, t : Line::Command(Command::Nor(r)) },
    <start:@L> "XOR" <end:@R> <r:Register>    => WithPos{ start, end, t : Line::Command(Command::Xor(r)) },
    <start:@L> "NXOR" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::NXor(r)) },
    <start:@L> "SETF" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::RegToFlags(r)) },
    <start:@L> "CMP" <end:@R> <r:Register>    => WithPos{ start, end, t : Line::Command(Command::Compare(r)) },
    <start:@L> "SADD" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::SwapAdd(r)) },
    <start:@L> "SSUB" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::SwapSub(r)) },
    <start:@L> "CADD" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::AddWithCarry(r)) },
    <start:@L> "CSUB" <end:@R> <r:Register>   => WithPos{ start, end, t : Line::Command(Command::SubWithCarry(r)) },

    <start:@L> "RAWRAMCALL" <end:@R>                              => WithPos{ start, end, t : Line::Command(Command::RawRamCall) },
    <start:@L> "INPUT" <end:@R>                                   => WithPos{ start, end, t : Line::Command(Command::Input) },
    <start:@L> "OUTPUT" <end:@R> <addr:DotSepNonEmpty<OctDigit>>  => WithPos{ start, end, t : Line::Command(Command::Output(addr)) },

    <start:@L> "..ROM" <end:@R> <n:NibbleNum> => WithPos{ start, end, t : Line::Meta(Meta::RomPage(n)) },
    <start:@L> "..RAM" <end:@R>               => WithPos{ start, end, t : Line::Meta(Meta::RamPage) },
    <start:@L> ".LABEL" <end:@R> <l:Label>    => WithPos{ start, end, t : Line::Meta(Meta::Label(l)) },
    <start:@L> ".USEFLAGS" <end:@R>           => WithPos{ start, end, t : Line::Meta(Meta::UseFlags) },

    <start:@L> ".COMMENT" <end:@R> <c:r#""[0-9|a-z|A-Z|\s|']*""#> => WithPos{ start, end, t : Line::Meta(Meta::Comment) },
}

pub Assembly: Assembly = {
    <lines:Concat<Line>> => Assembly::new(lines),
}

Concat<T>: Vec<T> = {
    => vec![],
    <mut v:(<T>)*> <e:T> => {
        v.push(e);
        v
    }
};

DotSepNonEmpty<T>: Vec<T> = {
    <mut v:(<T> ".")*> <e:T> => {
        v.push(e);
        v
    }
};