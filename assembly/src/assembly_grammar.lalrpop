use crate::assembly::*;
use std::str::FromStr;

grammar;

match {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"#[^\n\r]*[\n\r]*" => { }, // Skip `# comments`
} else {
    r"#[^\n]*[\n]*" => { }, // Skip `# comments`
} else {
    _
}

WithPos<T>: WithPos<T> = {
    <start:@L> <t:T> <end:@R> => WithPos{ start, end, t }
}

Label: WithPos<Label> = {
    <start:@L> <label:r"[a-z|_][a-z|_|0-9]*"> <end:@R> => WithPos{ start, end, t: Label::new(String::from(label)).unwrap() },
}

NibbleNum: Nibble = {
    "0" => Nibble::N0,
    "1" => Nibble::N1,
    "2" => Nibble::N2,
    "3" => Nibble::N3,
    "4" => Nibble::N4,
    "5" => Nibble::N5,
    "6" => Nibble::N6,
    "7" => Nibble::N7,
    "8" => Nibble::N8,
    "9" => Nibble::N9,
    "10" => Nibble::N10,
    "A" => Nibble::N10,
    "11" => Nibble::N11,
    "B" => Nibble::N11,
    "12" => Nibble::N12,
    "C" => Nibble::N12,
    "13" => Nibble::N13,
    "D" => Nibble::N13,
    "14" => Nibble::N14,
    "E" => Nibble::N14,
    "15" => Nibble::N15,
    "F" => Nibble::N15,
}

SixteenBitNum: Option<u16> = {
    "0" => Some(0),
    "1" => Some(1),
    "2" => Some(2),
    "3" => Some(3),
    "4" => Some(4),
    "5" => Some(5),
    "6" => Some(6),
    "7" => Some(7),
    "8" => Some(8),
    "9" => Some(9),
    "10" => Some(10),
    "11" => Some(11),
    "12" => Some(12),
    "13" => Some(13),
    "14" => Some(14),
    "15" => Some(15),
    <value:r"[0-9]+"> => u16::from_str(value).ok(),
    <value:r"-[0-9]+"> => i16::from_str(value).map(|v| v as u16).ok(),
}

OctDigit: OctDigit = {
    "0" => OctDigit::O0,
    "1" => OctDigit::O1,
    "2" => OctDigit::O2,
    "3" => OctDigit::O3,
    "4" => OctDigit::O4,
    "5" => OctDigit::O5,
    "6" => OctDigit::O6,
    "7" => OctDigit::O7,
}

Register: Nibble = {
    "%0" => Nibble::N0,
    "%1" => Nibble::N1,
    "%2" => Nibble::N2,
    "%3" => Nibble::N3,
    "%4" => Nibble::N4,
    "%5" => Nibble::N5,
    "%6" => Nibble::N6,
    "%7" => Nibble::N7,
    "%8" => Nibble::N8,
    "%9" => Nibble::N9,
    "%10" => Nibble::N10,
    "%A" => Nibble::N10,
    "%11" => Nibble::N11,
    "%B" => Nibble::N11,
    "%12" => Nibble::N12,
    "%C" => Nibble::N12,
    "%13" => Nibble::N13,
    "%D" => Nibble::N13,
    "%14" => Nibble::N14,
    "%E" => Nibble::N14,
    "%15" => Nibble::N15,
    "%F" => Nibble::N15,
}

Condition: Condition = {
    "I" => Condition::InputReady,
    "!I" => Condition::InputNotReady,
    "Z" => Condition::Equal,
    "!Z" => Condition::NotEqual,
    "N" => Condition::Negative,
    "!N" => Condition::Positive,
    "C" => Condition::HigherSame,
    "!C" => Condition::Lower,
    "V" => Condition::OverflowSet,
    "!V" => Condition::OverflowClear,
    "EQ" => Condition::Equal,
    "NE" => Condition::NotEqual,
    "HS" => Condition::HigherSame,
    "LO" => Condition::Lower,
    "HI" => Condition::Higher,
    "LS" => Condition::LowerSame,
    "GE" => Condition::GreaterEqual,
    "LT" => Condition::Less,
    "GT" => Condition::Greater,
    "LE" => Condition::LessEqual,
}

Line: Line = {
    "RAW" <n:WithPos<Concat<WithPos<NibbleNum>>>> => Line::Command(Command::Raw(n)),
    "RAW" <l:Label> => Line::Command(Command::RawLabel(l)),

    "PASS" => Line::Command(Command::Pass),
    "VALUE" <value:WithPos<SixteenBitNum>> => Line::Command(Command::Value(value)),
    "VALUE" <l:Label> => Line::Command(Command::ValueLabelled(l)),
    "JUMP" <l:Label> => Line::Command(Command::Jump(l)),
    "BRANCH" <c:WithPos<Condition>> <l:Label> => Line::Command(Command::Branch(c, l)),
    "PUSH" <r:WithPos<Register>> => Line::Command(Command::Push(r)),
    "POP" <r:WithPos<Register>> => Line::Command(Command::Pop(r)),
    "CALL" <l:Label> => Line::Command(Command::Call(l)),
    "RETURN" => Line::Command(Command::Return),
    "ADD" <r:WithPos<Register>> => Line::Command(Command::Add(r)),
    "ROTATE" <s:WithPos<NibbleNum>> <r:WithPos<Register>> => Line::Command(Command::Rotate{ shift : s, register : r }),

    "DUP" => Line::Command(Command::Duplicate),
    "NOT" => Line::Command(Command::Not),
    "KREAD" => Line::Command(Command::Read),
    "PREAD" => Line::Command(Command::ReadPop),
    "INC" => Line::Command(Command::Increment),
    "CINC" => Line::Command(Command::IncrementWithCarry),
    "DEC" => Line::Command(Command::Decrement),
    "CDEC" => Line::Command(Command::DecrementWithCarry),
    "NEG" => Line::Command(Command::Negate),
    "CNEG" => Line::Command(Command::NegateWithCarry),
    "KSETF" => Line::Command(Command::NoopSetFlags),
    "PSETF" => Line::Command(Command::PopSetFlags),
    "RSH" => Line::Command(Command::RightShift),
    "CRSH" => Line::Command(Command::RightShiftCarryIn),
    "IRSH" => Line::Command(Command::RightShiftOneIn),
    "ARSH" => Line::Command(Command::ArithmeticRightShift),

    "SWAP" <r:WithPos<Register>> => Line::Command(Command::Swap(r)),
    "SUB" <r:WithPos<Register>> => Line::Command(Command::Sub(r)),
    "KWRITE" <r:WithPos<Register>> => Line::Command(Command::Write(r)),
    "PWRITE" <r:WithPos<Register>> => Line::Command(Command::WritePop(r)),
    "AND" <r:WithPos<Register>> => Line::Command(Command::And(r)),
    "NAND" <r:WithPos<Register>> => Line::Command(Command::Nand(r)),
    "OR" <r:WithPos<Register>> => Line::Command(Command::Or(r)),
    "NOR" <r:WithPos<Register>> => Line::Command(Command::Nor(r)),
    "XOR" <r:WithPos<Register>> => Line::Command(Command::Xor(r)),
    "NXOR" <r:WithPos<Register>> => Line::Command(Command::NXor(r)),
    "SETF" <r:WithPos<Register>> => Line::Command(Command::RegToFlags(r)),
    "CMP" <r:WithPos<Register>> => Line::Command(Command::Compare(r)),
    "SADD" <r:WithPos<Register>> => Line::Command(Command::SwapAdd(r)),
    "SSUB" <r:WithPos<Register>> => Line::Command(Command::SwapSub(r)),
    "CADD" <r:WithPos<Register>> => Line::Command(Command::AddWithCarry(r)),
    "CSUB" <r:WithPos<Register>> => Line::Command(Command::SubWithCarry(r)),

    "RAWRAMCALL" => Line::Command(Command::RawRamCall),
    "INPUT" => Line::Command(Command::Input),
    "OUTPUT" <addr:WithPos<DotSepNonEmpty<WithPos<OctDigit>>>> => Line::Command(Command::Output(addr)),

    "ALLOC" <quantity:WithPos<SixteenBitNum>> => Line::Command(Command::Alloc(quantity)),
    "ALLOC" <l:Label> => Line::Command(Command::AllocLabelled(l)),

    "..ROM" <n:WithPos<NibbleNum>> => Line::Meta(Meta::RomPage(n)),
    "..RAM" => Line::Meta(Meta::RamPage),
    "..DATA" => Line::Meta(Meta::Data),
    ".LABEL" <l:Label> => Line::Meta(Meta::Label(l)),
    ".USEFLAGS" => Line::Meta(Meta::UseFlags),
    ".CONST" <l:Label> <v:WithPos<SixteenBitNum>> => Line::Meta(Meta::Constant(l, v)),
};

pub Assembly: Assembly = {
    <lines:Concat<WithPos<Line>>> => Assembly::new(lines),
}

Concat<T>: Vec<T> = {
    => vec![],
    <mut v:(<T>)*> <e:T> => {
        v.push(e);
        v
    }
};

DotSepNonEmpty<T>: Vec<T> = {
    <mut v:(<T> ".")*> <e:T> => {
        v.push(e);
        v
    }
};